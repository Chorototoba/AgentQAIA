import streamlit as st
import openai
import os
import base64
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# --- Configura√ß√£o de senha ---
SENHA_CORRETA = "QA123"

if "autenticado" not in st.session_state:
    st.session_state.autenticado = False

if not st.session_state.autenticado:
    st.title("üîí Acesso Restrito")
    senha_digitada = st.text_input("Digite a senha para acessar:", type="password")
    if st.button("Entrar"):
        if senha_digitada == SENHA_CORRETA:
            st.session_state.autenticado = True
            st.success("‚úÖ Acesso liberado!")
            st.rerun()
        else:
            st.error("‚ùå Senha incorreta.")
    st.stop()

# --- Prompt principal ---
PROMPT_TEMPLATE = """
Voc√™ √© um Engenheiro de QA S√™nior, especialista em automa√ß√£o de testes e escrita de cen√°rios BDD no formato Gherkin.
Sua tarefa √© gerar cen√°rios de teste extremamente completos, cobrindo todos os casos poss√≠veis (positivos, negativos, alternativos, de exce√ß√£o e limites) para a Hist√≥ria de Usu√°rio fornecida.

Instru√ß√µes obrigat√≥rias:
1. Use sempre o formato Gherkin com as palavras-chave Funcionalidade, Contexto, Cen√°rio, Cen√°rio de Exemplo, Esquema do Cen√°rio, Dado, Quando, Ent√£o, E ‚Äî tudo em portugu√™s.
2. Considere:
   - Fluxo feliz (caminho principal)
   - Casos negativos (erros, dados inv√°lidos, campos obrigat√≥rios n√£o preenchidos)
   - Casos de borda (limites num√©ricos, tamanhos m√°ximos e m√≠nimos de campos, formatos inv√°lidos)
   - Valida√ß√µes de seguran√ßa (inje√ß√£o de c√≥digo, XSS, acessos n√£o autorizados)
   - Restri√ß√µes de neg√≥cio espec√≠ficas
   - Comportamentos em navegadores diferentes (se aplic√°vel)
   - Cen√°rios de compatibilidade e performance quando necess√°rio
   - Condi√ß√µes iniciais de tela, incluindo casos em que filtros padr√£o (como datePicker) n√£o s√£o alterados
   - Intera√ß√µes combinadas entre filtros (ex.: um filtro n√£o √© alterado, outro sim)
3. Para cada cen√°rio:
   - O t√≠tulo deve ser claro e autoexplicativo
   - A descri√ß√£o deve cobrir o objetivo do teste
   - As etapas devem estar ordenadas e ser reutiliz√°veis
4. Agrupe os cen√°rios por tipo (Positivos, Negativos, Limite, Seguran√ßa, Regras de Neg√≥cio)
5. Inclua Esquema do Cen√°rio com Exemplos para valores m√∫ltiplos, quando aplic√°vel
6. Sempre validar mensagens de erro e confirma√ß√µes esperadas
7. Aplique as seguintes t√©cnicas de teste na cria√ß√£o dos cen√°rios:
   - **Particionamento de Equival√™ncia**
   - **An√°lise de Valor Limite**
   - **Tabela de Decis√£o**
   - **Planejamento e Execu√ß√£o**
   - Cobertura de diferentes fases do desenvolvimento

Formato de sa√≠da:
Funcionalidade: [Nome da funcionalidade]
  Contexto:
    Dado que [pr√©-condi√ß√£o]

  # Cen√°rios positivos
  Cen√°rio: [Descri√ß√£o]
    Dado que ...
    Quando ...
    Ent√£o ...

  # Cen√°rios negativos
  Cen√°rio: [Descri√ß√£o]
    Dado que ...
    Quando ...
    Ent√£o ...

  # Esquema do Cen√°rio com exemplos
  Esquema do Cen√°rio: [Descri√ß√£o]
    Dado que ...
    Quando ...
    Ent√£o ...

    Exemplos:
      | campo1 | campo2 |
      | valor1 | valor2 |

üìå D√∫vidas sobre a Atividade:
Liste todas as d√∫vidas ou pontos que precisam de esclarecimento sobre a hist√≥ria de usu√°rio, regras de neg√≥cio ou crit√©rios de aceita√ß√£o. 
Se n√£o houver d√∫vidas, escreva "Nenhuma d√∫vida identificada".

Hist√≥ria de Usu√°rio:
{historia_usuario}

Regras de Neg√≥cio:
{regras_negocio}

Crit√©rios de Aceita√ß√£o:
{criterios_aceitacao}
"""

# Fun√ß√£o para gerar cen√°rios
def gerar_cenarios(historia_usuario, regras_negocio, criterios_aceitacao, arquivos):
    prompt = PROMPT_TEMPLATE.format(
        historia_usuario=historia_usuario,
        regras_negocio=regras_negocio or "N√£o informado",
        criterios_aceitacao=criterios_aceitacao or "N√£o informado"
    )

    mensagens = [
        {"role": "system", "content": "Voc√™ √© um Engenheiro de QA S√™nior, especialista em testes BDD"},
        {"role": "user", "content": [{"type": "text", "text": prompt}]}
    ]

    # Adiciona arquivos (imagens/PDF) convertidos em base64
    for arquivo in arquivos:
        base64_data = base64.b64encode(arquivo.read()).decode("utf-8")
        mensagens[1]["content"].append(
            {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{base64_data}"}}
        )

    resposta = openai.chat.completions.create(
        model="gpt-4o",
        messages=mensagens,
        temperature=0.3,
        max_tokens=3000
    )

    return resposta.choices[0].message.content

# --- Interface principal ---
st.set_page_config(page_title="Gerador de Cen√°rios QA", layout="wide")

st.title("üß™ Agent IA - Gerador de Cen√°rios BDD")
st.write("Forne√ßa as informa√ß√µes abaixo para gerar cen√°rios de teste completos em formato Gherkin.")

atividade = st.text_input("Nome da Atividade")
historia_usuario = st.text_area("Hist√≥ria de Usu√°rio")
regras_negocio = st.text_area("Regras de Neg√≥cio (opcional)")
criterios_aceitacao = st.text_area("Crit√©rios de Aceita√ß√£o (opcional)")

arquivos = st.file_uploader("Enviar imagens ou PDFs (opcional)", type=["png", "jpg", "jpeg", "pdf"], accept_multiple_files=True)

if st.button("Gerar Cen√°rios"):
    if not atividade or not historia_usuario:
        st.warning("Por favor, informe pelo menos o Nome da Atividade e a Hist√≥ria de Usu√°rio.")
    else:
        with st.spinner("Gerando cen√°rios, aguarde..."):
            resultado = gerar_cenarios(historia_usuario, regras_negocio, criterios_aceitacao, arquivos)
            st.success("Cen√°rios gerados com sucesso!")
            st.download_button("üì• Baixar como .md", resultado, file_name=f"{atividade.replace(' ', '_')}.md")
            st.text_area("Resultado", resultado, height=500)
